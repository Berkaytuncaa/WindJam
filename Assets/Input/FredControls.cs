//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/FredControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FredControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FredControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FredControls"",
    ""maps"": [
        {
            ""name"": ""FredPlaying"",
            ""id"": ""ff1946b5-dcba-4b81-bd8c-71cf21f68237"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ad7d099d-35b7-4232-af58-71e1404803f9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d7a96529-93c5-401c-ba31-9b3e4bdeba24"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""595d7f72-4834-4e31-8759-8920617e4259"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbdScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5cd5a7f-055f-44e5-b454-dbbdd6d33f3b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbdScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0566ae71-01d6-4fe5-bb4b-4306ea889285"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbdScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5515417-4ff2-470b-a829-e07b2cc73154"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""kbdScheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""kbdScheme"",
            ""bindingGroup"": ""kbdScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FredPlaying
        m_FredPlaying = asset.FindActionMap("FredPlaying", throwIfNotFound: true);
        m_FredPlaying_Move = m_FredPlaying.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FredPlaying
    private readonly InputActionMap m_FredPlaying;
    private List<IFredPlayingActions> m_FredPlayingActionsCallbackInterfaces = new List<IFredPlayingActions>();
    private readonly InputAction m_FredPlaying_Move;
    public struct FredPlayingActions
    {
        private @FredControls m_Wrapper;
        public FredPlayingActions(@FredControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FredPlaying_Move;
        public InputActionMap Get() { return m_Wrapper.m_FredPlaying; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FredPlayingActions set) { return set.Get(); }
        public void AddCallbacks(IFredPlayingActions instance)
        {
            if (instance == null || m_Wrapper.m_FredPlayingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FredPlayingActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IFredPlayingActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IFredPlayingActions instance)
        {
            if (m_Wrapper.m_FredPlayingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFredPlayingActions instance)
        {
            foreach (var item in m_Wrapper.m_FredPlayingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FredPlayingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FredPlayingActions @FredPlaying => new FredPlayingActions(this);
    private int m_kbdSchemeSchemeIndex = -1;
    public InputControlScheme kbdSchemeScheme
    {
        get
        {
            if (m_kbdSchemeSchemeIndex == -1) m_kbdSchemeSchemeIndex = asset.FindControlSchemeIndex("kbdScheme");
            return asset.controlSchemes[m_kbdSchemeSchemeIndex];
        }
    }
    public interface IFredPlayingActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
